//IP Functional Simulation Model
//VERSION_BEGIN 23.1 cbx_mgl 2024:05:14:18:00:13:SC cbx_simgen 2024:05:14:17:53:42:SC  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



// Copyright (C) 2024  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// You may only use these simulation model output files for simulation
// purposes and expressly not for synthesis or any other purposes (in which
// event Intel disclaims all warranties of any kind).


//synopsys translate_off

//synthesis_resources = lut 43 mux21 2 oper_add 2 
`timescale 1 ps / 1 ps
module  fp16comp
	( 
	a,
	areset,
	b,
	clk,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [15:0]  a;
	input   areset;
	input   [15:0]  b;
	input   clk;
	output   [0:0]  q;

	reg	niOl;
	reg	nl0O;
	reg	nli0i;
	reg	nli0l;
	reg	nli0O;
	reg	nli1O;
	reg	nliii;
	reg	nliil;
	reg	nliiO;
	reg	nlili;
	reg	nlill;
	reg	nlilO;
	reg	nliOi;
	reg	nliOl;
	reg	nliOO;
	reg	nll0i;
	reg	nll0l;
	reg	nll0O;
	reg	nll1i;
	reg	nll1l;
	reg	nll1O;
	reg	nllii;
	reg	nllil;
	reg	nlliO;
	reg	nllli;
	reg	nllll;
	reg	nlllO;
	reg	nllOi;
	reg	nllOl;
	reg	nllOO;
	reg	nlO0i;
	reg	nlO0l;
	reg	nlO0O;
	reg	nlO1i;
	reg	nlO1l;
	reg	nlO1O;
	reg	nlOii;
	reg	nlOil;
	reg	nlOiO;
	reg	nlOli;
	reg	nlOll;
	reg	nlOlO;
	reg	nlOOi;
	wire	wire_nill_dataout;
	wire	wire_nl0i_dataout;
	wire  [17:0]   wire_nlii_o;
	wire  [17:0]   wire_nlil_o;
	wire  nl0iO;
	wire  nl0li;
	wire  nl0ll;
	wire  nl0lO;
	wire  nl0Oi;
	wire  nl0Ol;
	wire  nli1i;

	initial
	begin
		niOl = 0;
		nl0O = 0;
		nli0i = 0;
		nli0l = 0;
		nli0O = 0;
		nli1O = 0;
		nliii = 0;
		nliil = 0;
		nliiO = 0;
		nlili = 0;
		nlill = 0;
		nlilO = 0;
		nliOi = 0;
		nliOl = 0;
		nliOO = 0;
		nll0i = 0;
		nll0l = 0;
		nll0O = 0;
		nll1i = 0;
		nll1l = 0;
		nll1O = 0;
		nllii = 0;
		nllil = 0;
		nlliO = 0;
		nllli = 0;
		nllll = 0;
		nlllO = 0;
		nllOi = 0;
		nllOl = 0;
		nllOO = 0;
		nlO0i = 0;
		nlO0l = 0;
		nlO0O = 0;
		nlO1i = 0;
		nlO1l = 0;
		nlO1O = 0;
		nlOii = 0;
		nlOil = 0;
		nlOiO = 0;
		nlOli = 0;
		nlOll = 0;
		nlOlO = 0;
		nlOOi = 0;
	end
	always @ ( posedge clk or  posedge areset)
	begin
		if (areset == 1'b1) 
		begin
			niOl <= 0;
			nl0O <= 0;
			nli0i <= 0;
			nli0l <= 0;
			nli0O <= 0;
			nli1O <= 0;
			nliii <= 0;
			nliil <= 0;
			nliiO <= 0;
			nlili <= 0;
			nlill <= 0;
			nlilO <= 0;
			nliOi <= 0;
			nliOl <= 0;
			nliOO <= 0;
			nll0i <= 0;
			nll0l <= 0;
			nll0O <= 0;
			nll1i <= 0;
			nll1l <= 0;
			nll1O <= 0;
			nllii <= 0;
			nllil <= 0;
			nlliO <= 0;
			nllli <= 0;
			nllll <= 0;
			nlllO <= 0;
			nllOi <= 0;
			nllOl <= 0;
			nllOO <= 0;
			nlO0i <= 0;
			nlO0l <= 0;
			nlO0O <= 0;
			nlO1i <= 0;
			nlO1l <= 0;
			nlO1O <= 0;
			nlOii <= 0;
			nlOil <= 0;
			nlOiO <= 0;
			nlOli <= 0;
			nlOll <= 0;
			nlOlO <= 0;
			nlOOi <= 0;
		end
		else 
		begin
			niOl <= wire_nlii_o[17];
			nl0O <= wire_nlil_o[17];
			nli0i <= nli1O;
			nli0l <= nli0O;
			nli0O <= b[15];
			nli1O <= ((~ nl0Ol) | (~ nl0Oi));
			nliii <= nliil;
			nliil <= a[15];
			nliiO <= b[10];
			nlili <= b[11];
			nlill <= b[12];
			nlilO <= b[13];
			nliOi <= b[14];
			nliOl <= (b[0] & (~ nl0Ol));
			nliOO <= (b[1] & (~ nl0Ol));
			nll0i <= (b[5] & (~ nl0Ol));
			nll0l <= (b[6] & (~ nl0Ol));
			nll0O <= (b[7] & (~ nl0Ol));
			nll1i <= (b[2] & (~ nl0Ol));
			nll1l <= (b[3] & (~ nl0Ol));
			nll1O <= (b[4] & (~ nl0Ol));
			nllii <= (b[8] & (~ nl0Ol));
			nllil <= (b[9] & (~ nl0Ol));
			nlliO <= a[10];
			nllli <= a[11];
			nllll <= a[12];
			nlllO <= a[13];
			nllOi <= a[14];
			nllOl <= (a[0] & (~ nl0Oi));
			nllOO <= (a[1] & (~ nl0Oi));
			nlO0i <= (a[5] & (~ nl0Oi));
			nlO0l <= (a[6] & (~ nl0Oi));
			nlO0O <= (a[7] & (~ nl0Oi));
			nlO1i <= (a[2] & (~ nl0Oi));
			nlO1l <= (a[3] & (~ nl0Oi));
			nlO1O <= (a[4] & (~ nl0Oi));
			nlOii <= (a[8] & (~ nl0Oi));
			nlOil <= (a[9] & (~ nl0Oi));
			nlOiO <= (((nli0l & (~ nliii)) & nli0i) | (wire_nl0i_dataout & (~ (nli0l ^ nliii))));
			nlOli <= nl0lO;
			nlOll <= nl0li;
			nlOlO <= ((nl0ll & (~ nlOli)) | (nl0iO & (~ nlOll)));
			nlOOi <= nlOlO;
		end
	end
	and(wire_nill_dataout, nlOiO, (~ nlOOi));
	assign		wire_nl0i_dataout = ((~ nliii) === 1'b1) ? niOl : nl0O;
	oper_add   nlii
	( 
	.a({{2{1'b0}}, nliOi, nlilO, nlill, nlili, nliiO, nllil, nllii, nll0O, nll0l, nll0i, nll1O, nll1l, nll1i, nliOO, nliOl, 1'b1}),
	.b({{2{1'b1}}, (~ nllOi), (~ nlllO), (~ nllll), (~ nllli), (~ nlliO), (~ nlOil), (~ nlOii), (~ nlO0O), (~ nlO0l), (~ nlO0i), (~ nlO1O), (~ nlO1l), (~ nlO1i), (~ nllOO), (~ nllOl), 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlii_o));
	defparam
		nlii.sgate_representation = 0,
		nlii.width_a = 18,
		nlii.width_b = 18,
		nlii.width_o = 18;
	oper_add   nlil
	( 
	.a({{2{1'b0}}, nllOi, nlllO, nllll, nllli, nlliO, nlOil, nlOii, nlO0O, nlO0l, nlO0i, nlO1O, nlO1l, nlO1i, nllOO, nllOl, 1'b1}),
	.b({{2{1'b1}}, (~ nliOi), (~ nlilO), (~ nlill), (~ nlili), (~ nliiO), (~ nllil), (~ nllii), (~ nll0O), (~ nll0l), (~ nll0i), (~ nll1O), (~ nll1l), (~ nll1i), (~ nliOO), (~ nliOl), 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlil_o));
	defparam
		nlil.sgate_representation = 0,
		nlil.width_a = 18,
		nlil.width_b = 18,
		nlil.width_o = 18;
	assign
		nl0iO = ((((nllOi & nlllO) & nllll) & nllli) & nlliO),
		nl0li = ((((((((((~ a[0]) & (~ a[1])) & (~ a[2])) & (~ a[3])) & (~ a[4])) & (~ a[5])) & (~ a[6])) & (~ a[7])) & (~ a[8])) & (~ a[9])),
		nl0ll = ((((nliOi & nlilO) & nlill) & nlili) & nliiO),
		nl0lO = ((((((((((~ b[0]) & (~ b[1])) & (~ b[2])) & (~ b[3])) & (~ b[4])) & (~ b[5])) & (~ b[6])) & (~ b[7])) & (~ b[8])) & (~ b[9])),
		nl0Oi = (((((~ a[10]) & (~ a[11])) & (~ a[12])) & (~ a[13])) & (~ a[14])),
		nl0Ol = (((((~ b[10]) & (~ b[11])) & (~ b[12])) & (~ b[13])) & (~ b[14])),
		nli1i = 1'b1,
		q = {wire_nill_dataout};
endmodule //fp16comp
//synopsys translate_on
//VALID FILE
