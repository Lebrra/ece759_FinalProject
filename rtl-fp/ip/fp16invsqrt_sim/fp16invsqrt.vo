//IP Functional Simulation Model
//VERSION_BEGIN 23.1 cbx_mgl 2024:05:14:18:00:13:SC cbx_simgen 2024:05:14:17:53:42:SC  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



// Copyright (C) 2024  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// You may only use these simulation model output files for simulation
// purposes and expressly not for synthesis or any other purposes (in which
// event Intel disclaims all warranties of any kind).


//synopsys translate_off

//synthesis_resources = lut 79 oper_add 2 oper_mult 1 oper_mux 42 
`timescale 1 ps / 1 ps
module  fp16invsqrt
	( 
	a,
	areset,
	clk,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [15:0]  a;
	input   areset;
	input   clk;
	output   [15:0]  q;

	reg	n00i;
	reg	n01i;
	reg	n01O;
	reg	n0i;
	reg	n0li;
	reg	n0ll;
	reg	n0lO;
	reg	n0Oi;
	reg	n0Ol;
	reg	n0OO;
	reg	n11i;
	reg	n11O;
	reg	ni0i;
	reg	ni0l;
	reg	ni0O;
	reg	ni1i;
	reg	ni1l;
	reg	ni1O;
	reg	niii;
	reg	niil;
	reg	niiO;
	reg	nili;
	reg	nill;
	reg	nillO;
	reg	nilO;
	reg	nilOi;
	reg	nilOl;
	reg	nilOO;
	reg	niO0i;
	reg	niO0l;
	reg	niO0O;
	reg	niO1i;
	reg	niO1l;
	reg	niO1O;
	reg	niOi;
	reg	niOii;
	reg	niOil;
	reg	niOiO;
	reg	niOl;
	reg	niOli;
	reg	niOll;
	reg	niOlO;
	reg	niOO;
	reg	niOOi;
	reg	niOOl;
	reg	niOOO;
	reg	nl00i;
	reg	nl00l;
	reg	nl01i;
	reg	nl01l;
	reg	nl01O;
	reg	nl10i;
	reg	nl10l;
	reg	nl10O;
	reg	nl11i;
	reg	nl11l;
	reg	nl11O;
	reg	nl1i;
	reg	nl1ii;
	reg	nl1il;
	reg	nl1iO;
	reg	nl1li;
	reg	nl1ll;
	reg	nl1lO;
	reg	nl1Oi;
	reg	nl1Ol;
	reg	nl1OO;
	reg	nlOli;
	reg	nlOlO;
	reg	nlOOi;
	reg	nlOOl;
	reg	n01l;
	reg	n10i;
	reg	n11l;
	reg	n1OO;
	reg	nl1O;
	reg	nlOil;
	reg	nlOll;
	reg	nlOOO;
	wire  [6:0]   wire_nlO_o;
	wire  [15:0]   wire_nlOiO_o;
	wire  [14:0]   wire_nl0i_o;
	wire  wire_n00l_o;
	wire  wire_n00O_o;
	wire  wire_n0ii_o;
	wire  wire_n0il_o;
	wire  wire_n0iO_o;
	wire  wire_n0l_o;
	wire  wire_n0O_o;
	wire  wire_n10l_o;
	wire  wire_n10O_o;
	wire  wire_n1i_o;
	wire  wire_n1ii_o;
	wire  wire_n1il_o;
	wire  wire_n1iO_o;
	wire  wire_n1l_o;
	wire  wire_n1li_o;
	wire  wire_n1ll_o;
	wire  wire_n1lO_o;
	wire  wire_n1Oi_o;
	wire  wire_n1Ol_o;
	wire  wire_ni_o;
	wire  wire_nl_o;
	wire  wire_nl0l_o;
	wire  wire_nl0O_o;
	wire  wire_nlii_o;
	wire  wire_nlil_o;
	wire  wire_nliO_o;
	wire  wire_nlli_o;
	wire  wire_nlll_o;
	wire  wire_nllO_o;
	wire  wire_nllOi_o;
	wire  wire_nllOl_o;
	wire  wire_nllOO_o;
	wire  wire_nlO0i_o;
	wire  wire_nlO0l_o;
	wire  wire_nlO0O_o;
	wire  wire_nlO1i_o;
	wire  wire_nlO1l_o;
	wire  wire_nlO1O_o;
	wire  wire_nlOi_o;
	wire  wire_nlOii_o;
	wire  wire_nlOl_o;
	wire  wire_nlOO_o;
	wire  nil0i;
	wire  nil0l;
	wire  nil0O;
	wire  nilii;
	wire  nilil;
	wire  niliO;

	initial
	begin
		n00i = 0;
		n01i = 0;
		n01O = 0;
		n0i = 0;
		n0li = 0;
		n0ll = 0;
		n0lO = 0;
		n0Oi = 0;
		n0Ol = 0;
		n0OO = 0;
		n11i = 0;
		n11O = 0;
		ni0i = 0;
		ni0l = 0;
		ni0O = 0;
		ni1i = 0;
		ni1l = 0;
		ni1O = 0;
		niii = 0;
		niil = 0;
		niiO = 0;
		nili = 0;
		nill = 0;
		nillO = 0;
		nilO = 0;
		nilOi = 0;
		nilOl = 0;
		nilOO = 0;
		niO0i = 0;
		niO0l = 0;
		niO0O = 0;
		niO1i = 0;
		niO1l = 0;
		niO1O = 0;
		niOi = 0;
		niOii = 0;
		niOil = 0;
		niOiO = 0;
		niOl = 0;
		niOli = 0;
		niOll = 0;
		niOlO = 0;
		niOO = 0;
		niOOi = 0;
		niOOl = 0;
		niOOO = 0;
		nl00i = 0;
		nl00l = 0;
		nl01i = 0;
		nl01l = 0;
		nl01O = 0;
		nl10i = 0;
		nl10l = 0;
		nl10O = 0;
		nl11i = 0;
		nl11l = 0;
		nl11O = 0;
		nl1i = 0;
		nl1ii = 0;
		nl1il = 0;
		nl1iO = 0;
		nl1li = 0;
		nl1ll = 0;
		nl1lO = 0;
		nl1Oi = 0;
		nl1Ol = 0;
		nl1OO = 0;
		nlOli = 0;
		nlOlO = 0;
		nlOOi = 0;
		nlOOl = 0;
	end
	always @ ( posedge clk or  posedge areset)
	begin
		if (areset == 1'b1) 
		begin
			n00i <= 0;
			n01i <= 0;
			n01O <= 0;
			n0i <= 0;
			n0li <= 0;
			n0ll <= 0;
			n0lO <= 0;
			n0Oi <= 0;
			n0Ol <= 0;
			n0OO <= 0;
			n11i <= 0;
			n11O <= 0;
			ni0i <= 0;
			ni0l <= 0;
			ni0O <= 0;
			ni1i <= 0;
			ni1l <= 0;
			ni1O <= 0;
			niii <= 0;
			niil <= 0;
			niiO <= 0;
			nili <= 0;
			nill <= 0;
			nillO <= 0;
			nilO <= 0;
			nilOi <= 0;
			nilOl <= 0;
			nilOO <= 0;
			niO0i <= 0;
			niO0l <= 0;
			niO0O <= 0;
			niO1i <= 0;
			niO1l <= 0;
			niO1O <= 0;
			niOi <= 0;
			niOii <= 0;
			niOil <= 0;
			niOiO <= 0;
			niOl <= 0;
			niOli <= 0;
			niOll <= 0;
			niOlO <= 0;
			niOO <= 0;
			niOOi <= 0;
			niOOl <= 0;
			niOOO <= 0;
			nl00i <= 0;
			nl00l <= 0;
			nl01i <= 0;
			nl01l <= 0;
			nl01O <= 0;
			nl10i <= 0;
			nl10l <= 0;
			nl10O <= 0;
			nl11i <= 0;
			nl11l <= 0;
			nl11O <= 0;
			nl1i <= 0;
			nl1ii <= 0;
			nl1il <= 0;
			nl1iO <= 0;
			nl1li <= 0;
			nl1ll <= 0;
			nl1lO <= 0;
			nl1Oi <= 0;
			nl1Ol <= 0;
			nl1OO <= 0;
			nlOli <= 0;
			nlOlO <= 0;
			nlOOi <= 0;
			nlOOl <= 0;
		end
		else 
		begin
			n00i <= wire_nl0i_o[5];
			n01i <= wire_n0ii_o;
			n01O <= wire_n0iO_o;
			n0i <= wire_n0O_o;
			n0li <= wire_nl0i_o[6];
			n0ll <= wire_nl0i_o[7];
			n0lO <= wire_nl0i_o[8];
			n0Oi <= wire_nl0i_o[9];
			n0Ol <= wire_nl0i_o[10];
			n0OO <= wire_nl0i_o[11];
			n11i <= wire_n1lO_o;
			n11O <= wire_n1Ol_o;
			ni0i <= wire_nl0O_o;
			ni0l <= wire_nlii_o;
			ni0O <= wire_nlil_o;
			ni1i <= wire_nl0i_o[12];
			ni1l <= wire_nl0i_o[14];
			ni1O <= wire_nl0l_o;
			niii <= wire_nliO_o;
			niil <= wire_nlli_o;
			niiO <= wire_nlll_o;
			nili <= wire_nllO_o;
			nill <= nilii;
			nillO <= nilOi;
			nilO <= a[0];
			nilOi <= a[15];
			nilOl <= a[10];
			nilOO <= a[11];
			niO0i <= nil0O;
			niO0l <= (nillO & niO0i);
			niO0O <= nil0l;
			niO1i <= a[12];
			niO1l <= a[13];
			niO1O <= a[14];
			niOi <= a[1];
			niOii <= a[10];
			niOil <= niOOi;
			niOiO <= niOOl;
			niOl <= a[2];
			niOli <= niOOO;
			niOll <= nl11i;
			niOlO <= nl11l;
			niOO <= a[3];
			niOOi <= wire_nlO_o[1];
			niOOl <= wire_nlO_o[2];
			niOOO <= wire_nlO_o[3];
			nl00i <= wire_nlOiO_o[11];
			nl00l <= wire_nlOiO_o[12];
			nl01i <= wire_nlOiO_o[8];
			nl01l <= wire_nlOiO_o[9];
			nl01O <= wire_nlOiO_o[10];
			nl10i <= (nil0i & niO0O);
			nl10l <= a[5];
			nl10O <= a[6];
			nl11i <= wire_nlO_o[4];
			nl11l <= wire_nlO_o[5];
			nl11O <= (nil0i & (~ niO0O));
			nl1i <= a[4];
			nl1ii <= a[7];
			nl1il <= a[8];
			nl1iO <= a[9];
			nl1li <= a[10];
			nl1ll <= wire_nlOiO_o[3];
			nl1lO <= wire_nlOiO_o[4];
			nl1Oi <= wire_nlOiO_o[5];
			nl1Ol <= wire_nlOiO_o[6];
			nl1OO <= wire_nlOiO_o[7];
			nlOli <= wire_n10O_o;
			nlOlO <= wire_n1il_o;
			nlOOi <= wire_n1iO_o;
			nlOOl <= wire_n1li_o;
		end
	end
	initial
	begin
		n01l = 0;
		n10i = 0;
		n11l = 0;
		n1OO = 0;
		nl1O = 0;
		nlOil = 0;
		nlOll = 0;
		nlOOO = 0;
	end
	always @ ( posedge clk or  posedge areset)
	begin
		if (areset == 1'b1) 
		begin
			n01l <= 1;
			n10i <= 1;
			n11l <= 1;
			n1OO <= 1;
			nl1O <= 1;
			nlOil <= 1;
			nlOll <= 1;
			nlOOO <= 1;
		end
		else 
		begin
			n01l <= wire_n0il_o;
			n10i <= wire_n00l_o;
			n11l <= wire_n1Oi_o;
			n1OO <= wire_n00O_o;
			nl1O <= wire_n0l_o;
			nlOil <= wire_n10l_o;
			nlOll <= wire_n1ii_o;
			nlOOO <= wire_n1ll_o;
		end
	end
	event n01l_event;
	event n10i_event;
	event n11l_event;
	event n1OO_event;
	event nl1O_event;
	event nlOil_event;
	event nlOll_event;
	event nlOOO_event;
	initial
		#1 ->n01l_event;
	initial
		#1 ->n10i_event;
	initial
		#1 ->n11l_event;
	initial
		#1 ->n1OO_event;
	initial
		#1 ->nl1O_event;
	initial
		#1 ->nlOil_event;
	initial
		#1 ->nlOll_event;
	initial
		#1 ->nlOOO_event;
	always @(n01l_event)
		n01l <= 1;
	always @(n10i_event)
		n10i <= 1;
	always @(n11l_event)
		n11l <= 1;
	always @(n1OO_event)
		n1OO <= 1;
	always @(nl1O_event)
		nl1O <= 1;
	always @(nlOil_event)
		nlOil <= 1;
	always @(nlOll_event)
		nlOll <= 1;
	always @(nlOOO_event)
		nlOOO <= 1;
	oper_add   nlO
	( 
	.a({1'b0, 1'b1, 1'b0, 1'b1, wire_nl_o, wire_ni_o, 1'b1}),
	.b({{2{1'b1}}, (~ niO1O), (~ niO1l), (~ niO1i), (~ nilOO), 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlO_o));
	defparam
		nlO.sgate_representation = 0,
		nlO.width_a = 7,
		nlO.width_b = 7,
		nlO.width_o = 7;
	oper_add   nlOiO
	( 
	.a({{2{n01O}}, n01l, n01i, n1OO, n10i, n11O, n11l, n11i, nlOOO, nlOOl, nlOOi, nlOlO, nlOll, nlOli, nlOil}),
	.b({{8{ni1l}}, ni1i, n0OO, n0Ol, n0Oi, n0lO, n0ll, n0li, n00i}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlOiO_o));
	defparam
		nlOiO.sgate_representation = 0,
		nlOiO.width_a = 16,
		nlOiO.width_b = 16,
		nlOiO.width_o = 16;
	oper_mult   nl0i
	( 
	.a({1'b0, nl1i, niOO, niOl, niOi, nilO}),
	.b({nill, nili, niiO, niil, niii, ni0O, ni0l, ni0i, ni1O}),
	.o(wire_nl0i_o));
	defparam
		nl0i.sgate_representation = 1,
		nl0i.width_a = 6,
		nl0i.width_b = 9,
		nl0i.width_o = 15;
	oper_mux   n00l
	( 
	.data({{7{1'b1}}, {8{1'b0}}, {7{1'b1}}, {5{1'b0}}, {4{1'b1}}, {14{1'b0}}, {10{1'b1}}, {7{1'b0}}, {2{1'b1}}}),
	.o(wire_n00l_o),
	.sel({nl1li, nl1iO, nl1il, nl1ii, nl10O, nl10l}));
	defparam
		n00l.width_data = 64,
		n00l.width_sel = 6;
	oper_mux   n00O
	( 
	.data({{7{1'b1}}, {15{1'b0}}, {9{1'b1}}, {24{1'b0}}, {9{1'b1}}}),
	.o(wire_n00O_o),
	.sel({nl1li, nl1iO, nl1il, nl1ii, nl10O, nl10l}));
	defparam
		n00O.width_data = 64,
		n00O.width_sel = 6;
	oper_mux   n0ii
	( 
	.data({{7{1'b0}}, {24{1'b1}}, {33{1'b0}}}),
	.o(wire_n0ii_o),
	.sel({nl1li, nl1iO, nl1il, nl1ii, nl10O, nl10l}));
	defparam
		n0ii.width_data = 64,
		n0ii.width_sel = 6;
	oper_mux   n0il
	( 
	.data({{31{1'b1}}, 1'b0, {32{1'b1}}}),
	.o(wire_n0il_o),
	.sel({nl1li, nl1iO, nl1il, nl1ii, nl10O, nl10l}));
	defparam
		n0il.width_data = 64,
		n0il.width_sel = 6;
	oper_mux   n0iO
	( 
	.data({{31{1'b0}}, 1'b1, {32{1'b0}}}),
	.o(wire_n0iO_o),
	.sel({nl1li, nl1iO, nl1il, nl1ii, nl10O, nl10l}));
	defparam
		n0iO.width_data = 64,
		n0iO.width_sel = 6;
	oper_mux   n0l
	( 
	.data({1'b1, {2{1'b0}}, 1'b1, {3{1'b0}}, 1'b1}),
	.o(wire_n0l_o),
	.sel({niliO, niO0i, nilil}));
	defparam
		n0l.width_data = 8,
		n0l.width_sel = 3;
	oper_mux   n0O
	( 
	.data({1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, {2{1'b0}}}),
	.o(wire_n0O_o),
	.sel({niliO, niO0i, nilil}));
	defparam
		n0O.width_data = 8,
		n0O.width_sel = 3;
	oper_mux   n10l
	( 
	.data({1'b1, 1'b0, {2{1'b1}}, {3{1'b0}}, {2{1'b1}}, 1'b0, 1'b1, {2{1'b0}}, 1'b1, 1'b0, {3{1'b1}}, {3{1'b0}}, 1'b1, {2{1'b0}}, {2{1'b1}}, {4{1'b0}}, {6{1'b1}}, 1'b0, 1'b1, 1'b0, {2{1'b1}}, {3{1'b0}}, 1'b1, {2{1'b0}}, {4{1'b1}}, {3{1'b0}}, 1'b1, {2{1'b0}}, 1'b1, {2{1'b0}}, {2{1'b1}}, 1'b0, 1'b1}),
	.o(wire_n10l_o),
	.sel({nl1li, nl1iO, nl1il, nl1ii, nl10O, nl10l}));
	defparam
		n10l.width_data = 64,
		n10l.width_sel = 6;
	oper_mux   n10O
	( 
	.data({1'b0, {2{1'b1}}, 1'b0, {2{1'b1}}, {4{1'b0}}, 1'b1, 1'b0, {2{1'b1}}, {2{1'b0}}, 1'b1, {3{1'b0}}, 1'b1, 1'b0, {2{1'b1}}, 1'b0, 1'b1, 1'b0, {3{1'b1}}, 1'b0, 1'b1, 1'b0, {2{1'b1}}, {6{1'b0}}, {2{1'b1}}, {3{1'b0}}, {4{1'b1}}, {2{1'b0}}, 1'b1, 1'b0, {6{1'b1}}, 1'b0, 1'b1, {2{1'b0}}}),
	.o(wire_n10O_o),
	.sel({nl1li, nl1iO, nl1il, nl1ii, nl10O, nl10l}));
	defparam
		n10O.width_data = 64,
		n10O.width_sel = 6;
	oper_mux   n1i
	( 
	.data({{2{1'b1}}, niOll, 1'b0}),
	.o(wire_n1i_o),
	.sel({n0i, nl1O}));
	defparam
		n1i.width_data = 4,
		n1i.width_sel = 2;
	oper_mux   n1ii
	( 
	.data({1'b0, {2{1'b1}}, 1'b0, {2{1'b1}}, 1'b0, {2{1'b1}}, 1'b0, 1'b1, 1'b0, {4{1'b1}}, 1'b0, {2{1'b1}}, {3{1'b0}}, 1'b1, 1'b0, {2{1'b1}}, {2{1'b0}}, 1'b1, {3{1'b0}}, {2{1'b1}}, {4{1'b0}}, 1'b1, {3{1'b0}}, {3{1'b1}}, 1'b0, {2{1'b1}}, {2{1'b0}}, {6{1'b1}}, {3{1'b0}}, 1'b1, {2{1'b0}}, {2{1'b1}}}),
	.o(wire_n1ii_o),
	.sel({nl1li, nl1iO, nl1il, nl1ii, nl10O, nl10l}));
	defparam
		n1ii.width_data = 64,
		n1ii.width_sel = 6;
	oper_mux   n1il
	( 
	.data({1'b0, {2{1'b1}}, {2{1'b0}}, {2{1'b1}}, {2{1'b0}}, {3{1'b1}}, {2{1'b0}}, 1'b1, {3{1'b0}}, {3{1'b1}}, 1'b0, 1'b1, 1'b0, {4{1'b1}}, 1'b0, {2{1'b1}}, {3{1'b0}}, 1'b1, 1'b0, 1'b1, 1'b0, {5{1'b1}}, 1'b0, {2{1'b1}}, {2{1'b0}}, 1'b1, 1'b0, {3{1'b1}}, 1'b0, {2{1'b1}}, 1'b0, {5{1'b1}}, {2{1'b0}}}),
	.o(wire_n1il_o),
	.sel({nl1li, nl1iO, nl1il, nl1ii, nl10O, nl10l}));
	defparam
		n1il.width_data = 64,
		n1il.width_sel = 6;
	oper_mux   n1iO
	( 
	.data({1'b0, {2{1'b1}}, {3{1'b0}}, 1'b1, 1'b0, 1'b1, 1'b0, {5{1'b1}}, 1'b0, 1'b1, 1'b0, {3{1'b1}}, {3{1'b0}}, {2{1'b1}}, 1'b0, {3{1'b1}}, {5{1'b0}}, {2{1'b1}}, {2{1'b0}}, 1'b1, 1'b0, 1'b1, {2{1'b0}}, {5{1'b1}}, {2{1'b0}}, 1'b1, {2{1'b0}}, {2{1'b1}}, {2{1'b0}}, 1'b1, {3{1'b0}}, 1'b1, 1'b0}),
	.o(wire_n1iO_o),
	.sel({nl1li, nl1iO, nl1il, nl1ii, nl10O, nl10l}));
	defparam
		n1iO.width_data = 64,
		n1iO.width_sel = 6;
	oper_mux   n1l
	( 
	.data({{2{1'b1}}, niOlO, 1'b0}),
	.o(wire_n1l_o),
	.sel({n0i, nl1O}));
	defparam
		n1l.width_data = 4,
		n1l.width_sel = 2;
	oper_mux   n1li
	( 
	.data({{2{1'b1}}, {2{1'b0}}, 1'b1, 1'b0, {2{1'b1}}, {2{1'b0}}, {5{1'b1}}, {2{1'b0}}, {2{1'b1}}, 1'b0, {2{1'b1}}, {2{1'b0}}, {2{1'b1}}, {2{1'b0}}, 1'b1, {8{1'b0}}, {3{1'b1}}, {2{1'b0}}, 1'b1, {2{1'b0}}, 1'b1, 1'b0, 1'b1, {2{1'b0}}, 1'b1, {3{1'b0}}, {2{1'b1}}, {3{1'b0}}, 1'b1, 1'b0, 1'b1, {2{1'b0}}}),
	.o(wire_n1li_o),
	.sel({nl1li, nl1iO, nl1il, nl1ii, nl10O, nl10l}));
	defparam
		n1li.width_data = 64,
		n1li.width_sel = 6;
	oper_mux   n1ll
	( 
	.data({1'b0, {3{1'b1}}, {2{1'b0}}, {4{1'b1}}, {5{1'b0}}, {4{1'b1}}, {2{1'b0}}, 1'b1, 1'b0, {2{1'b1}}, {2{1'b0}}, 1'b1, {4{1'b0}}, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, {2{1'b0}}, 1'b1, {2{1'b0}}, 1'b1, {2{1'b0}}, {3{1'b1}}, {4{1'b0}}, {2{1'b1}}, {4{1'b0}}, {2{1'b1}}, 1'b0, 1'b1}),
	.o(wire_n1ll_o),
	.sel({nl1li, nl1iO, nl1il, nl1ii, nl10O, nl10l}));
	defparam
		n1ll.width_data = 64,
		n1ll.width_sel = 6;
	oper_mux   n1lO
	( 
	.data({{2{1'b1}}, 1'b0, 1'b1, 1'b0, {2{1'b1}}, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, {2{1'b1}}, 1'b0, {2{1'b1}}, 1'b0, {3{1'b1}}, {6{1'b0}}, {2{1'b1}}, {2{1'b0}}, {2{1'b1}}, 1'b0, {2{1'b1}}, 1'b0, {2{1'b1}}, 1'b0, {2{1'b1}}, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, {2{1'b1}}, {2{1'b0}}, 1'b1, 1'b0, 1'b1, 1'b0, {2{1'b1}}, 1'b0}),
	.o(wire_n1lO_o),
	.sel({nl1li, nl1iO, nl1il, nl1ii, nl10O, nl10l}));
	defparam
		n1lO.width_data = 64,
		n1lO.width_sel = 6;
	oper_mux   n1Oi
	( 
	.data({{2{1'b1}}, {2{1'b0}}, {3{1'b1}}, {2{1'b0}}, {2{1'b1}}, {2{1'b0}}, {2{1'b1}}, {2{1'b0}}, {2{1'b1}}, 1'b0, {2{1'b1}}, 1'b0, {2{1'b1}}, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, {4{1'b0}}, {4{1'b1}}, {3{1'b0}}, {3{1'b1}}, {3{1'b0}}, {2{1'b1}}, {2{1'b0}}, {3{1'b1}}, 1'b0, {2{1'b1}}, {2{1'b0}}, {2{1'b1}}, 1'b0, 1'b1}),
	.o(wire_n1Oi_o),
	.sel({nl1li, nl1iO, nl1il, nl1ii, nl10O, nl10l}));
	defparam
		n1Oi.width_data = 64,
		n1Oi.width_sel = 6;
	oper_mux   n1Ol
	( 
	.data({{2{1'b0}}, {5{1'b1}}, {4{1'b0}}, {4{1'b1}}, {4{1'b0}}, {3{1'b1}}, {3{1'b0}}, {2{1'b1}}, {2{1'b0}}, {2{1'b1}}, {8{1'b0}}, {6{1'b1}}, {5{1'b0}}, {5{1'b1}}, {3{1'b0}}, {4{1'b1}}, {2{1'b0}}}),
	.o(wire_n1Ol_o),
	.sel({nl1li, nl1iO, nl1il, nl1ii, nl10O, nl10l}));
	defparam
		n1Ol.width_data = 64,
		n1Ol.width_sel = 6;
	oper_mux   ni
	( 
	.data({{2{1'b0}}, 1'b1, 1'b0}),
	.o(wire_ni_o),
	.sel({niO0O, niOii}));
	defparam
		ni.width_data = 4,
		ni.width_sel = 2;
	oper_mux   nl
	( 
	.data({{2{1'b1}}, 1'b0, 1'b1}),
	.o(wire_nl_o),
	.sel({niO0O, niOii}));
	defparam
		nl.width_data = 4,
		nl.width_sel = 2;
	oper_mux   nl0l
	( 
	.data({1'b0, {2{1'b1}}, 1'b0, 1'b1, {2{1'b0}}, 1'b1, 1'b0, {3{1'b1}}, 1'b0, {3{1'b1}}, {2{1'b0}}, 1'b1, {3{1'b0}}, 1'b1, 1'b0, {3{1'b1}}, {3{1'b0}}, 1'b1, 1'b0, 1'b1, {3{1'b0}}, {4{1'b1}}, 1'b0, 1'b1, {2{1'b0}}, {2{1'b1}}, 1'b0, 1'b1, {3{1'b0}}, 1'b1, {2{1'b0}}, {2{1'b1}}, 1'b0, {2{1'b1}}, 1'b0, 1'b1, 1'b0, {2{1'b1}}}),
	.o(wire_nl0l_o),
	.sel({a[10:5]}));
	defparam
		nl0l.width_data = 64,
		nl0l.width_sel = 6;
	oper_mux   nl0O
	( 
	.data({1'b0, {4{1'b1}}, 1'b0, {2{1'b1}}, {3{1'b0}}, {7{1'b1}}, {2{1'b0}}, 1'b1, 1'b0, 1'b1, {3{1'b0}}, {2{1'b1}}, {3{1'b0}}, {3{1'b1}}, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, {2{1'b1}}, 1'b0, {2{1'b1}}, {2{1'b0}}, 1'b1, 1'b0, {2{1'b1}}, {3{1'b0}}, 1'b1, {3{1'b0}}, {3{1'b1}}}),
	.o(wire_nl0O_o),
	.sel({a[10:5]}));
	defparam
		nl0O.width_data = 64,
		nl0O.width_sel = 6;
	oper_mux   nlii
	( 
	.data({1'b1, 1'b0, {2{1'b1}}, {2{1'b0}}, 1'b1, {2{1'b0}}, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, {2{1'b1}}, {2{1'b0}}, {7{1'b1}}, 1'b0, {4{1'b1}}, {2{1'b0}}, {2{1'b1}}, {2{1'b0}}, {2{1'b1}}, 1'b0, {2{1'b1}}, 1'b0, {2{1'b1}}, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, {2{1'b1}}, 1'b0, {5{1'b1}}}),
	.o(wire_nlii_o),
	.sel({a[10:5]}));
	defparam
		nlii.width_data = 64,
		nlii.width_sel = 6;
	oper_mux   nlil
	( 
	.data({{2{1'b0}}, {4{1'b1}}, {3{1'b0}}, {2{1'b1}}, {2{1'b0}}, {2{1'b1}}, {2{1'b0}}, {2{1'b1}}, 1'b0, {2{1'b1}}, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1, {2{1'b0}}, {5{1'b1}}, {4{1'b0}}, {3{1'b1}}, {3{1'b0}}, {3{1'b1}}, {2{1'b0}}, {2{1'b1}}, {2{1'b0}}, 1'b1, {2{1'b0}}, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1}),
	.o(wire_nlil_o),
	.sel({a[10:5]}));
	defparam
		nlil.width_data = 64,
		nlil.width_sel = 6;
	oper_mux   nliO
	( 
	.data({{2{1'b0}}, {7{1'b1}}, {4{1'b0}}, {4{1'b1}}, {3{1'b0}}, {3{1'b1}}, {2{1'b0}}, {2{1'b1}}, {2{1'b0}}, {2{1'b1}}, 1'b0, {9{1'b1}}, {6{1'b0}}, {5{1'b1}}, {4{1'b0}}, {3{1'b1}}, {2{1'b0}}, {2{1'b1}}, 1'b0}),
	.o(wire_nliO_o),
	.sel({a[10:5]}));
	defparam
		nliO.width_data = 64,
		nliO.width_sel = 6;
	oper_mux   nlli
	( 
	.data({{2{1'b1}}, {11{1'b0}}, {7{1'b1}}, {5{1'b0}}, {4{1'b1}}, {3{1'b0}}, {15{1'b1}}, {9{1'b0}}, {5{1'b1}}, {3{1'b0}}}),
	.o(wire_nlli_o),
	.sel({a[10:5]}));
	defparam
		nlli.width_data = 64,
		nlli.width_sel = 6;
	oper_mux   nlll
	( 
	.data({{13{1'b0}}, {12{1'b1}}, {31{1'b0}}, {8{1'b1}}}),
	.o(wire_nlll_o),
	.sel({a[10:5]}));
	defparam
		nlll.width_data = 64,
		nlll.width_sel = 6;
	oper_mux   nllO
	( 
	.data({{13{1'b1}}, {19{1'b0}}, {24{1'b1}}, {8{1'b0}}}),
	.o(wire_nllO_o),
	.sel({a[10:5]}));
	defparam
		nllO.width_data = 64,
		nllO.width_sel = 6;
	oper_mux   nllOi
	( 
	.data({1'b1, 1'b0, nl1ll, 1'b0}),
	.o(wire_nllOi_o),
	.sel({n0i, nl1O}));
	defparam
		nllOi.width_data = 4,
		nllOi.width_sel = 2;
	oper_mux   nllOl
	( 
	.data({{2{1'b0}}, nl1lO, 1'b0}),
	.o(wire_nllOl_o),
	.sel({n0i, nl1O}));
	defparam
		nllOl.width_data = 4,
		nllOl.width_sel = 2;
	oper_mux   nllOO
	( 
	.data({{2{1'b0}}, nl1Oi, 1'b0}),
	.o(wire_nllOO_o),
	.sel({n0i, nl1O}));
	defparam
		nllOO.width_data = 4,
		nllOO.width_sel = 2;
	oper_mux   nlO0i
	( 
	.data({{2{1'b0}}, nl01l, 1'b0}),
	.o(wire_nlO0i_o),
	.sel({n0i, nl1O}));
	defparam
		nlO0i.width_data = 4,
		nlO0i.width_sel = 2;
	oper_mux   nlO0l
	( 
	.data({{2{1'b0}}, nl01O, 1'b0}),
	.o(wire_nlO0l_o),
	.sel({n0i, nl1O}));
	defparam
		nlO0l.width_data = 4,
		nlO0l.width_sel = 2;
	oper_mux   nlO0O
	( 
	.data({{2{1'b0}}, nl00i, 1'b0}),
	.o(wire_nlO0O_o),
	.sel({n0i, nl1O}));
	defparam
		nlO0O.width_data = 4,
		nlO0O.width_sel = 2;
	oper_mux   nlO1i
	( 
	.data({{2{1'b0}}, nl1Ol, 1'b0}),
	.o(wire_nlO1i_o),
	.sel({n0i, nl1O}));
	defparam
		nlO1i.width_data = 4,
		nlO1i.width_sel = 2;
	oper_mux   nlO1l
	( 
	.data({{2{1'b0}}, nl1OO, 1'b0}),
	.o(wire_nlO1l_o),
	.sel({n0i, nl1O}));
	defparam
		nlO1l.width_data = 4,
		nlO1l.width_sel = 2;
	oper_mux   nlO1O
	( 
	.data({{2{1'b0}}, nl01i, 1'b0}),
	.o(wire_nlO1O_o),
	.sel({n0i, nl1O}));
	defparam
		nlO1O.width_data = 4,
		nlO1O.width_sel = 2;
	oper_mux   nlOi
	( 
	.data({{2{1'b1}}, niOil, 1'b0}),
	.o(wire_nlOi_o),
	.sel({n0i, nl1O}));
	defparam
		nlOi.width_data = 4,
		nlOi.width_sel = 2;
	oper_mux   nlOii
	( 
	.data({{2{1'b0}}, nl00l, 1'b0}),
	.o(wire_nlOii_o),
	.sel({n0i, nl1O}));
	defparam
		nlOii.width_data = 4,
		nlOii.width_sel = 2;
	oper_mux   nlOl
	( 
	.data({{2{1'b1}}, niOiO, 1'b0}),
	.o(wire_nlOl_o),
	.sel({n0i, nl1O}));
	defparam
		nlOl.width_data = 4,
		nlOl.width_sel = 2;
	oper_mux   nlOO
	( 
	.data({{2{1'b1}}, niOli, 1'b0}),
	.o(wire_nlOO_o),
	.sel({n0i, nl1O}));
	defparam
		nlOO.width_data = 4,
		nlOO.width_sel = 2;
	assign
		nil0i = ((((niO1O & niO1l) & niO1i) & nilOO) & nilOl),
		nil0l = ((((((((((~ a[0]) & (~ a[1])) & (~ a[2])) & (~ a[3])) & (~ a[4])) & (~ a[5])) & (~ a[6])) & (~ a[7])) & (~ a[8])) & (~ a[9])),
		nil0O = (((((~ niO1O) & (~ niO1l)) & (~ niO1i)) & (~ nilOO)) & (~ nilOl)),
		nilii = 1'b1,
		nilil = ((~ nillO) & nl10i),
		niliO = ((nillO & (~ niO0i)) | nl11O),
		q = {niO0l, wire_n1l_o, wire_n1i_o, wire_nlOO_o, wire_nlOl_o, wire_nlOi_o, wire_nlOii_o, wire_nlO0O_o, wire_nlO0l_o, wire_nlO0i_o, wire_nlO1O_o, wire_nlO1l_o, wire_nlO1i_o, wire_nllOO_o, wire_nllOl_o, wire_nllOi_o};
endmodule //fp16invsqrt
//synopsys translate_on
//VALID FILE
